#+TITLE: Blogger Bust Python Project README
#+AUTHOR: BloggerBust
#+DESCRIPTION: A place for me to store python code that I might want to blog about
#+STARTUP: showeverything

* Introduction
BbPyP (Blogger Bust Python Project) is a collection of python packages that I intend to use to help develop other more interesting python projects.

* Projects that use the BbPyP package
** [[https://github.com/BloggerBust/lexicomb][Lexicomb]]
#+INCLUDE: "~/dev/lexicomb/README.org::Introduction" :only-contents t

* Configuration
Each bbpyp namespace has a [[http://python-dependency-injector.ets-labs.org/containers/index.html][Dependency Injector IoC container]] that accepts a python dictionary named /config/.
** Logging
*config Key:* logger
*Is Optional:* True

The ~logger~ configuration key may be set to any valid [[https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig][logging dictionary configuration]]. This parameter is entirely optional.

There are four named loggers that can be configured:

1. ~bbpyp.common~

2. ~bbpyp.message_bus~

3. ~bbpyp.lexical_state_machine~

4. ~bbpyp.interpreter_state_machine~

** Message Bus
*config Key:* ~memory_channel_topic~
*Is Optional:* True

#+begin_src python
  "memory_channel_topic": {
      "topic_name_1": {
          "publish_concurrency": 1,
          "subscribe_concurrency": 1
      },
      "topic_name_2": {
          "publish_concurrency": 1,
          "subscribe_concurrency": 1,
      },
      "topic_name_3": {
          "publish_concurrency": 1,
          "subscribe_concurrency": 1,
          "queue_type": QueueType.SEQUENCE
      }
  },
#+end_src

Memory channels allow the passing of objects between tasks owned by a single process. The ~bbpyp.message_bus~ package uses the [[https://trio.readthedocs.io/en/stable/reference-core.html#trio.open_memory_channel][Trio library's memory channel]] to facilitate =Pub/Sub=.  The ~memory_channel_topic~ config attribute tells the message bus how many concurrent memory connections should be created for each topic with respect to publishing and subscribing. Cross channel communication is currently made possible using queues. The ~queue_type~ attribute may be set to ~QueueType.SEQUENCE~ or ~QueueType.FIFO~ with ~QueueType.FIFO~ being the default.

*config Key:* ~memory_channel_topic_default~
*Is Optional:* True

#+begin_src python
  "memory_channel_topic_default": {
      "publish_concurrency": 1,
      "subscribe_concurrency": 1,      
      "queue_type": QueueType.FIFO      
  },
#+end_src

Provides default settings for any topic that is not configured in ~memory_channel_topic~. If ~memory_channel_topic_default~ is not set, then it defaults to the values shown above.

*config Key:* ~memory_channel_max_buffer_size~
*Is Optional:* True

#+begin_src python
  "memory_channel_max_buffer_size": 5
#+end_src

The number of objects that can be temporarily stored in a memory channel prior to being processed. The default is 5.

* How to contribute
I am happy to accept pull requests. If you need to get a hold of me you can [[https://github.com/BloggerBust/bbpyp/issues][create an issue]] or [[https://bloggerbust.ca/about/][email me directly]].

** How to setup a developer environment
First, [[https://github.com/login?return_to=%2FBloggerBust%2Fbbpyp][fork this repository]] and clone your fork to a local dev environment.
#+begin_src sh
    git clone https://github.com/<your-username>/bbpyp.git
#+end_src

Next, create a venv and install the latest pip and setuptools.
#+begin_src sh :results output silent :shebang "#!/bin/bash" :dir ~/dev
    cd bbpyp
    python -m venv venv
    source venv/bin/activate
    pip install -q --upgrade pip setuptools
#+end_src

Lastly, install the /dev/ requirements declared in [[file:dev-requirements.txt][dev-requirements.txt]] and run the unit tests.
#+begin_src sh :results output scalar silent :shebang "#!/bin/bash" :dir ~/dev/bbpyp
  pip install -q -r dev-requirements.txt
  python -m unittest discover
#+end_src

#+RESULTS:

#+begin_example
...............................................................................................................................................
----------------------------------------------------------------------
Ran 143 tests in 0.554s

OK
#+end_example

** Where to do your work
Keep your mainline up to date with upstream.
#+begin_src sh
  git fetch origin --prune
  git checkout master
  git --ff-only origin/master
#+end_src

Make your changes in a feature branch.
#+begin_src sh
  git checkout -b branch_name
#+end_src

** Don't forget unit tests
Unit tests are written using python's [[https://docs.python.org/3/library/unittest.html][unittest framework]] and [[https://docs.python.org/3/library/unittest.mock.html][mock library]]. Please do write unit tests to accommodate your contribution.

** Making commits
Read Chris Beams excellent [[https://chris.beams.io/posts/git-commit/][article on writing commit messages]] and do your best to follow his advice.

** Making a pull request
If you feel that your changes would be appreciated upstream then it is time to create a pull request. Please [[*Don't forget unit tests][write unit tests]] and run all the tests again before making a pull request to defend against inadvertently braking something.
#+begin_src sh
  python -m unittest discover
#+end_src

If you have made many intermittent commits in your feature branch, then please make a squash branch and [[https://blog.carbonfive.com/2017/08/28/always-squash-and-rebase-your-git-commits/][rebase with a single squashed commit]]. A squash branch is just a spin-off branch where you can perform the squash and rebase without the fear of corrupting your feature branch. My preference is to perform an interactive rebase. Note, that a squash branch is pointless if you only made a single commit.

First switch to master and fast forward to HEAD. This will reduce the risk of having a merge conflict later.
#+begin_src sh
  git checkout master
  git fetch origin --prune
  git merge --ff-only origin/master
#+end_src

Next, switch back to your feature branch and pull any changes fetched to master. If there are conflicts, then resolve them. Be sure to run all the tests once more if you had to merge with changes from upstream.
#+begin_src sh
  git checkout branch_name
  git pull origin/master
  python -m unittest discover
#+end_src

Then, create your squash branch and begin the interactive rebase following [[https://blog.carbonfive.com/2017/08/28/always-squash-and-rebase-your-git-commits/][this guidance]].
#+begin_src sh
  git checkout -b branch_name_squash
  git rebase -i branch_name_squash
#+end_src

Finally, push the squash branch to remote and [[https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request][create a pull request]].

* Packaging
For convenience distribution requirements, including pep517 package, are defined in [[file:dist-requirements.txt][dist-requirements.txt]].
#+begin_src sh :results output scalar silent :shebang "#!/bin/bash" :dir ~/dev/bbpyp
pip install -q -r dist-requirements.txt
python -m pep517.build .
#+end_src

By default the wheel and sdist are placed in a directory named dist.
#+begin_src sh :results output scalar :shebang "#!/bin/bash" :dir ~/dev/bbpyp :wrap example
  ls dist
#+end_src

#+RESULTS:

#+begin_example
bbpyp-0.0.2-py3-none-any.whl
bbpyp-0.0.2.tar.gz
#+end_example


* License
[[file:LICENSE-2.0.txt][Apache License v2.0]]
